# ПРИМЕРЫ ВЫВОДА И БАЗОВЫЕ ПЕРМЕННЫЕ (ЧИСЛА И СТРОКИ) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# print ('Hello world')
# a = 123
# b = 1.23
# name = 'Alex Tom'
# value = None
# print(type(a)) # покажет int
# print(type(b)) # показывает как кортеж
# print(type(name)) # покажет строку
# print(type(value)) # покажет как тип не определен
# value = 234
# s = 'Hello "world"'# так используем кавычки, когда внутри строки нужно использовать еще ковычки, можно меня местами
# print(s)
# str = "Перенос \nстроки"
# print (str)
# s2 = 'апостроф \'так'
# print(s2)
# print(a, b, name, value)
# print(a, 'string', b, 'and string', name, value)
# print('{}-{}-{}'.format(a,b,s))
# print('{}-{}-{}'.format(s,b,a))
# print(f'{a}-{s}-{b}')
# print('{2}-{1}-{0}'.format(a,b,s))

# ЛОГИЧЕСКИЕ ПЕРЕМЕННЫЕ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# f = True
# print(f)
# print(type(f))

# МАССИВОВ В PYTHON КАК ТАКОВЫХ НЕТ, НО ЕСТЬ СПИСКИ: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# list = [1, 2, 3, 4, 5]
# print(list)
# list = ['1', '2', '3', 'Hello', 'world']
# print(list)
# list = [1, 2, 3, "Hello", 'World']
# print(list)
# array = [1, 2, 3, 'true']
# print(array)

# ВВОД И ВЫВОД ДАННЫХ print() - ОТДАЕТ, input() - ПРИНИМАЕТ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# print('Введите a:')
# a = input()
# print('Введите b:')
# b = input()
# print(a, b, a+b, f'{a}+{b}')
# print('{} {}'.format(a,b))
# print(f'{a} {b}')
# print('Введите a2:')
# a2 = int(input())
# print('Введите b2:')
# b2 = int(input())
# print(a2, '+', b2, '=', a2+b2)
# print('Введите вещественное число: ')
# x = float(input())
# print(x)

# АРИФМЕТИЧЕСКИЕ ОПЕРАЦИИ  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# a = 1.256
# b = 5
# c = round(a * b, 2)
# d = 2
# e = b // d
# k = d ** b
# print(c, '-', e, '-', k)

# СОКРАЩЕННЫЕ ОПЕРАЦИИ ПРИСВАИВАНИЯ  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# a = 3
# a = a + 5
# b = 3
# b += 5
# print(a,'-', b)

# ЛОГИЧЕСКИЕ ОПЕРАЦИИ  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# a = 1 < 4 and 5 > 2
# b = 1 == 4
# c = 1 > 3 and 5 < 3
# d = 1 != 2
# print(a, '-', b, '-', c, '-', d)
# s1 = 'str'
# s2 = 'str'
# print(s1 == s2)
# list1 = [1, 2, 3]
# list2 = [1, 2, 3]
# print(list1 == list2)
# x = 1 < 3 < 5 < 10
# print(x)
# func = 1
# T = 4
# x = 123
# print(func<T>(x)) # так можно генерить неравенства
# f = 1 > 2 or 4 < 6
# print('дизъюнкция (or), хотябы одно высказывание истина - ответ:', f)
# f = [1, 2, 3, 4]
# print(f)
# print('2 in f:', 2 in f)
# print('not 2 in f:', not 2 in f)
# is_odd = f[0] % 2 == 0
# print(is_odd)
# is_odd1 = not f[0] % 2 == 0
# print(is_odd1)
# k = f[0] % 2
# print(k)
# print(not k)

# УПРАВЛЯЮЩИЕ КОНСТРУКЦИИ if, if - else !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# username = input('Введите имя: ')
# if (username == 'Софешка'):
#     print('Ура! Это же Софешка!!!')
# elif(username == 'Антон'):
#     print('Так это Антон!')
# elif(username == 'Мама'):
#     print('О, это Мама!')
# else:
#     print('Привет, ', username)

# x = int(input('x = '))
# y = int(input('y = 5'))
# if x > y:
#     print(x)
# else:
#     print(y)

# УПРАВЛЯЮЩИЕ КОНСТРУКЦИИ WHILE  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# original = 23
# inverted = 0
# while original != 0:
#     inverted = inverted * 10 + (original % 10)
#     original //= 10
#     print(original)
# else:
#     print('Пожалуй')
#     print('хватит')
# print(inverted)

# While - else, есть блок else, выполняется в том случае, когда основное тело цикла while перестает работать

# УПРАВЛЯЮЩИЕ КОНСТРУКЦИИ for  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# for i in 1, 2, 3, 4, 5:
#     print(i ** 2)
# print()
# list = [1, 2, 3, 4, 10, 5]
# for i in list:
#     print(i)
# print()
# r = range(10) 
# for i in r:
#     print(i)
# print()
# for i in range(1, 10, 2):
#     print(i)
# print()
# for i in 'str':
#     print(i)

# НЕМНОГО О СТРОКАХ  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#text = 'съешь еще этих мягких французских булок'
# print(len(text)) # Выведет кол-во символов в предложении, с учетом пробелов
# print('еще' in text) # Выведет true, так как "еще" есть в предложении
# print(text.isdigit()) # Выведет false, так как в предложении не только цифры (true - когда одни цифры)
# print(text.islower()) # Если все буквы нижнего регистра, то true. Если хоть одна буква заглавная - false
# print(text.replace('еще', 'чуть чуть')) # Выведет все предложение, заменив слово "еще" -> "чуть чуть"
# for c in text:
#     print(c, end='') # end='' - позволяет выводить в одну строчку все символы

# СРЕЗЫ ПРИ РАБОТЕ СО СТРОКАМИ  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# print(1, text[0]) # Выведет первый символ строки
# print(2, text[6]) # Выведет 6-й символ строки
# print(3, text[len(text) - 1]) # Выведет последний символ строки, -1 так как считается с 0
# print(4, text[-5]) # Выведет "б", так как -5 -> будет с конца отсчитывать 5-й символ
# print(5, text[:]) # Выведет всю строку от нулевого символа, [:] аналогично выражение [0:len(text)]
# print(6, text[:2]) # Выведет 2 первых символа, от первого до 2-го -> съ, анлогично [0:2]
# print(7, text[len(text) - 2:]) # Выведет все символы после символа 39-2 -> ок
# print(8, text[2:9]) # Выведет символы со 2-го по 9-й включительно
# print(9, text[6:-18]) # Выведет все символы от 6-го с начала и до -18 с конца строки
# print(10, text[0:len(text) :6]) # Сперва выведет символ от нулевого -> 6-й символ, далее от 1-ы -> 6-й символ
# print(11, text[::6]) # Так же выводит 6-е символы
# text = text[2:9] + text[-5] + text[:2] # Изменит text на символы с 2-9 + 5-й символ с конца + первые 2 символа
# print(12, text)

# СПИСКИ - ПРОНУМЕРОВАННАЯ, ИЗМЕНЯЕМАЯ КОЛЛЕКЦИЯ ОБЪЕКТОВ "ПРОИЗВОЛЬНЫХ" ТИПОВ  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# numbers = [1, 2, 3, 4, 5]
# print(1, numbers) 
# numbers2 = list(range(1, 6)) # range - не является списком
# print(2, numbers2)
# numbers2[0] = 10
# print(3, numbers2)
# for i in numbers:
#     i *= 2
#     print(i, end=' ')
# print()
# print(4, numbers)
# print(type(range))
# print(type(numbers))
# ran = range(1, 6)
# array = list(ran) # Приведение типа range к типу list
# print(type(ran)) # Класс range
# print(type(array)) # Класс list
# print(type(numbers)) # Класс list
# print(len(numbers))
# print(f'{len(numbers)}')

# ДОПОЛНЕНИЯ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# colors = ['red', 'green', 'blue']
# for e in colors:
#     print(e) # Просто выведет список
# for e in colors:
#     print(e*2) # Выведет двойные значения: redred, greengreen, blueblue
# colors.append('gray') # метод append добавит в конец списка значение 'gray'
# print(colors == ['red', 'green', 'blue', 'gray']) # Выведет true, так как добавлен 'gray'
# print(colors)
# colors.remove('blue') # Метод remove удалит 'blue'
# print(colors)
# del colors[0] # Удалять можно и таким образом
# print(colors)

# КАК ОПИСЫВАЮТСЯ ФУНКЦИИ НА ЯЗЫКЕ PYTHON - ФРАГМЕНТ ПРОГРАММЫ, КОТОРЫЙ МНОГОКРАТНО ИСПОЛЬЗУЕТСЯ  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # def function_name(argument): - задается функция "def" + название функции + (аргумент)
    # body line 1 - тело функции
    # .....
    # body line n - тело функции
    # optional return - опционально, может вызываться return

# def f(x):
#     if x == 1:
#         return 'целое'
#     elif x == 2.3:
#         return 23
#     else:
#         return 
# arg = 1
# arg2 = 2.3
# print(f(arg))
# print(type(f(arg)))
# print(f(arg2))
# print(type(f(arg2)))

# ЧТОБЫ ПОСМОТРЕТЬ СПРАВКУ ПО МЕТОДУ ИЛИ ФУНКЦИИ => PRINT(TEXT.МЕТОД/ФУНКЦИЯ)   